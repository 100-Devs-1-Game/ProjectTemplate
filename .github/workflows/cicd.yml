# This is a workflow to build and release for platforms defined in the export configuration file (export_template.cfg)

name: CI / CD

env:
  GODOT_VERSION: 4.4.1
# Whenever a tag push matching pattern "v*" then run the job
on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

  pull_request:
    branches: [ main ]

jobs:
  build-game:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Checkout LFS objects
        run: git lfs pull

      - name: Git Diff Pre-Build
        run: |
          git status
          git diff

      - name: build game
        id: build
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v5.2.1
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./src
          use_preset_export_path: true
          archive_output: true
          export_debug: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Validate Git Diff
        run: |
          ./scripts/validate_git_diff.sh

      - name: show build directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Build: ${{ steps.build.outputs.build_directory }}
          FOLDER_PATH="${{ steps.build.outputs.build_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi

      - name: show archive directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Archive: ${{ steps.build.outputs.archive_directory }}
          FOLDER_PATH="${{ steps.build.outputs.archive_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi

      - name: Test release build size for itch.io
        run: |
          python3 ./scripts/test_release_size.py ${{ steps.build.outputs.build_directory }}/web_release
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: windows-export
          path: ${{ steps.build.outputs.archive_directory }}/**/windows.zip
          retention-days: 1
          compression-level: 0

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: linux-export
          path: ${{ steps.build.outputs.archive_directory }}/**/linux_release.zip
          retention-days: 1
          compression-level: 0
      - name: create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: |
            ${{ steps.build.outputs.archive_directory }}/**/*.zip

      - name: Deploy to itch.io
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ./get_butler.sh
          BUTLER_API_KEY=${{ secrets.BUTLER_API_KEY }} ./butler --verbose push ${{ steps.build.outputs.build_directory }}/web_release ${{ vars.ITCHIO_USERNAME }}/${{ vars.ITCHIO_GAME }}:web

      - name: Send Discord notification
        if: startsWith(github.ref, 'refs/tags/')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'SpiritKeeper ${{ github.ref_name }} has been released to : https://${{ vars.ITCHIO_USERNAME }}.itch.io/${{ vars.ITCHIO_GAME }} Password: ${{ secrets.ITCHIO_PAGE_PASS }}'

  test-linux-build:
    needs: build-game
    runs-on: ubuntu-22.04
    if:  ${{ !startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-export
          path: ./linux-build

      - name: Show artifact directory
        run: |
          echo Archive: ./linux-build
          FOLDER_PATH="./linux-build"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi

      - name: Unzip artifact
        run: |
          mkdir ./test_game
          unzip "$(find ./linux-build -name linux_release.zip)" -d ./test_game
          chmod +x ./test_game/*

      - name: Run tests
        run: |
          set -e
          set -o pipefail

          TEMP_FILE=/tmp/test_linux_release.log
          ./test_game/linux_release.x86_64 --headless --render-thread safe --single-threaded-scene --verbose --quit-after 1000 2>&1 | tee $TEMP_FILE

          # This should line up with whatever branch of https://github.com/100-Devs-1-Game/godot-gut-ci/ that we're using
          # Except GUT requires an editor build, so we can't use it in the release? idk

          echo ""
          echo ""
          echo ""
          echo ""
          echo ""
          echo "#####################"
          echo "       RESULTS       "
          echo "#####################"

          FAILED=0

          # Check for any error lines (case-insensitive)
          # Ignores null time for textures: https://github.com/godotengine/godot/issues/108994
          FILTERED_ERRORS=$(grep "ERROR" "$TEMP_FILE" | grep -v 'ERROR: Parameter "t" is null.') || true

          if [ -n "$FILTERED_ERRORS" ]; then
            echo "CI FAILED BECAUSE OF THESE GODOT ERRORS"
            echo "$FILTERED_ERRORS"
            echo ""
            FAILED=1
          fi

          # Check for invalid UID warnings which will cause problems for other people
          FILTERED_WARNINGS=$(grep "WARNING" "$TEMP_FILE" | grep 'invalid UID:') || true

          if [ -n "$FILTERED_WARNINGS" ]; then
            echo "CI FAILED BECAUSE OF THESE GODOT WARNINGS"
            echo "$FILTERED_WARNINGS"
            echo ""
            FAILED=1
          fi

          if [ "$FAILED" -eq 0 ]; then
            echo "ALL GOOD :) :) :)"
            echo ""
            echo ""
            echo ""
            echo ""
            echo ""
          fi

          exit $FAILED
